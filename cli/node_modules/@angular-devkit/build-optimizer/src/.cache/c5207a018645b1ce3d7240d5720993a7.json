{"remainingRequest":"/Users/emrecanbolat/s2i-angular-container/cli/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/emrecanbolat/s2i-angular-container/cli/node_modules/ngx-color-picker/dist/ngx-color-picker.es5.js","dependencies":[{"path":"/Users/emrecanbolat/s2i-angular-container/cli/node_modules/ngx-color-picker/dist/ngx-color-picker.es5.js","mtime":1521235174000},{"path":"/Users/emrecanbolat/s2i-angular-container/cli/node_modules/cache-loader/dist/cjs.js","mtime":1523583716000},{"path":"/Users/emrecanbolat/s2i-angular-container/cli/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, Injectable, Component, ViewChild, ViewEncapsulation, ChangeDetectorRef, ApplicationRef, ViewContainerRef, Injector, ReflectiveInjector, ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Cmyk = /*@__PURE__*/ (function () {\n    function Cmyk(c, m, y, k) {\n        this.c = c;\n        this.m = m;\n        this.y = y;\n        this.k = k;\n    }\n    return Cmyk;\n}());\nvar Hsla = /*@__PURE__*/ (function () {\n    function Hsla(h, s, l, a) {\n        this.h = h;\n        this.s = s;\n        this.l = l;\n        this.a = a;\n    }\n    return Hsla;\n}());\nvar Hsva = /*@__PURE__*/ (function () {\n    function Hsva(h, s, v, a) {\n        this.h = h;\n        this.s = s;\n        this.v = v;\n        this.a = a;\n    }\n    return Hsva;\n}());\nvar Rgba = /*@__PURE__*/ (function () {\n    function Rgba(r, g, b, a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    return Rgba;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction detectIE() {\n    var /** @type {?} */ ua = '';\n    if (typeof navigator !== 'undefined') {\n        ua = navigator.userAgent.toLowerCase();\n    }\n    var /** @type {?} */ msie = ua.indexOf('msie ');\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n    }\n    // Other browser\n    return false;\n}\nvar TextDirective = /*@__PURE__*/ (function () {\n    function TextDirective() {\n        this.newValue = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TextDirective.prototype.inputChange = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ value = event.target.value;\n            if (this.rg === undefined) {\n                this.newValue.emit(value);\n            }\n            else {\n                var /** @type {?} */ numeric = parseFloat(value);\n                if (!isNaN(numeric) && numeric >= 0 && numeric <= this.rg) {\n                    this.newValue.emit({ v: numeric, rg: this.rg });\n                }\n            }\n        };\n    return TextDirective;\n}());\nvar SliderDirective = /*@__PURE__*/ (function () {\n    function SliderDirective(elRef) {\n        var _this = this;\n        this.elRef = elRef;\n        this.dragEnd = new EventEmitter();\n        this.dragStart = new EventEmitter();\n        this.newValue = new EventEmitter();\n        this.listenerMove = function (event) { return _this.move(event); };\n        this.listenerStop = function () { return _this.stop(); };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.mouseDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.start(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.touchStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.start(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.move = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            this.setCursor(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.start = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.setCursor(event);\n            document.addEventListener('mouseup', this.listenerStop);\n            document.addEventListener('touchend', this.listenerStop);\n            document.addEventListener('mousemove', this.listenerMove);\n            document.addEventListener('touchmove', this.listenerMove);\n            this.dragStart.emit();\n        };\n    /**\n     * @return {?}\n     */\n    SliderDirective.prototype.stop = /**\n     * @return {?}\n     */\n        function () {\n            document.removeEventListener('mouseup', this.listenerStop);\n            document.removeEventListener('touchend', this.listenerStop);\n            document.removeEventListener('mousemove', this.listenerMove);\n            document.removeEventListener('touchmove', this.listenerMove);\n            this.dragEnd.emit();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.getX = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ position = this.elRef.nativeElement.getBoundingClientRect();\n            var /** @type {?} */ pageX = (event.pageX !== undefined) ? event.pageX : event.touches[0].pageX;\n            return pageX - position.left - window.pageXOffset;\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.getY = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ position = this.elRef.nativeElement.getBoundingClientRect();\n            var /** @type {?} */ pageY = (event.pageY !== undefined) ? event.pageY : event.touches[0].pageY;\n            return pageY - position.top - window.pageYOffset;\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SliderDirective.prototype.setCursor = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ width = this.elRef.nativeElement.offsetWidth;\n            var /** @type {?} */ height = this.elRef.nativeElement.offsetHeight;\n            var /** @type {?} */ x = Math.max(0, Math.min(this.getX(event), width));\n            var /** @type {?} */ y = Math.max(0, Math.min(this.getY(event), height));\n            if (this.rgX !== undefined && this.rgY !== undefined) {\n                this.newValue.emit({ s: x / width, v: (1 - y / height), rgX: this.rgX, rgY: this.rgY });\n            }\n            else if (this.rgX === undefined && this.rgY !== undefined) {\n                this.newValue.emit({ v: y / height, rgY: this.rgY });\n            }\n            else if (this.rgX !== undefined && this.rgY === undefined) {\n                this.newValue.emit({ v: x / width, rgX: this.rgX });\n            }\n        };\n    return SliderDirective;\n}());\nvar SliderPosition = /*@__PURE__*/ (function () {\n    function SliderPosition(h, s, v, a) {\n        this.h = h;\n        this.s = s;\n        this.v = v;\n        this.a = a;\n    }\n    return SliderPosition;\n}());\nvar SliderDimension = /*@__PURE__*/ (function () {\n    function SliderDimension(h, s, v, a) {\n        this.h = h;\n        this.s = s;\n        this.v = v;\n        this.a = a;\n    }\n    return SliderDimension;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ColorPickerService = /*@__PURE__*/ (function () {\n    function ColorPickerService() {\n        this.active = null;\n    }\n    /**\n     * @param {?} active\n     * @return {?}\n     */\n    ColorPickerService.prototype.setActive = /**\n     * @param {?} active\n     * @return {?}\n     */\n        function (active) {\n            if (this.active && this.active !== active && this.active.cpDialogDisplay !== 'inline') {\n                this.active.closeColorPicker();\n            }\n            this.active = active;\n        };\n    /**\n     * @param {?} hsva\n     * @return {?}\n     */\n    ColorPickerService.prototype.hsva2hsla = /**\n     * @param {?} hsva\n     * @return {?}\n     */\n        function (hsva) {\n            var /** @type {?} */ h = hsva.h, /** @type {?} */ s = hsva.s, /** @type {?} */ v = hsva.v, /** @type {?} */ a = hsva.a;\n            if (v === 0) {\n                return new Hsla(h, 0, 0, a);\n            }\n            else if (s === 0 && v === 1) {\n                return new Hsla(h, 1, 1, a);\n            }\n            else {\n                var /** @type {?} */ l = v * (2 - s) / 2;\n                return new Hsla(h, v * s / (1 - Math.abs(2 * l - 1)), l, a);\n            }\n        };\n    /**\n     * @param {?} hsla\n     * @return {?}\n     */\n    ColorPickerService.prototype.hsla2hsva = /**\n     * @param {?} hsla\n     * @return {?}\n     */\n        function (hsla) {\n            var /** @type {?} */ h = Math.min(hsla.h, 1), /** @type {?} */ s = Math.min(hsla.s, 1);\n            var /** @type {?} */ l = Math.min(hsla.l, 1), /** @type {?} */ a = Math.min(hsla.a, 1);\n            if (l === 0) {\n                return new Hsva(h, 0, 0, a);\n            }\n            else {\n                var /** @type {?} */ v = l + s * (1 - Math.abs(2 * l - 1)) / 2;\n                return new Hsva(h, 2 * (v - l) / v, v, a);\n            }\n        };\n    /**\n     * @param {?} hsva\n     * @return {?}\n     */\n    ColorPickerService.prototype.hsvaToRgba = /**\n     * @param {?} hsva\n     * @return {?}\n     */\n        function (hsva) {\n            var /** @type {?} */ r, /** @type {?} */ g, /** @type {?} */ b;\n            var /** @type {?} */ h = hsva.h, /** @type {?} */ s = hsva.s, /** @type {?} */ v = hsva.v, /** @type {?} */ a = hsva.a;\n            var /** @type {?} */ i = Math.floor(h * 6);\n            var /** @type {?} */ f = h * 6 - i;\n            var /** @type {?} */ p = v * (1 - s);\n            var /** @type {?} */ q = v * (1 - f * s);\n            var /** @type {?} */ t = v * (1 - (1 - f) * s);\n            switch (i % 6) {\n                case 0:\n                    r = v, g = t, b = p;\n                    break;\n                case 1:\n                    r = q, g = v, b = p;\n                    break;\n                case 2:\n                    r = p, g = v, b = t;\n                    break;\n                case 3:\n                    r = p, g = q, b = v;\n                    break;\n                case 4:\n                    r = t, g = p, b = v;\n                    break;\n                case 5:\n                    r = v, g = p, b = q;\n                    break;\n            }\n            return new Rgba(r, g, b, a);\n        };\n    /**\n     * @param {?} rgba\n     * @return {?}\n     */\n    ColorPickerService.prototype.rgbaToCmyk = /**\n     * @param {?} rgba\n     * @return {?}\n     */\n        function (rgba) {\n            var /** @type {?} */ k = 1 - Math.max(rgba.r, rgba.g, rgba.b);\n            if (k === 1) {\n                return new Cmyk(0, 0, 0, 1);\n            }\n            else {\n                var /** @type {?} */ c = (1 - rgba.r - k) / (1 - k);\n                var /** @type {?} */ m = (1 - rgba.g - k) / (1 - k);\n                var /** @type {?} */ y = (1 - rgba.b - k) / (1 - k);\n                return new Cmyk(c, m, y, k);\n            }\n        };\n    /**\n     * @param {?} rgba\n     * @return {?}\n     */\n    ColorPickerService.prototype.rgbaToHsva = /**\n     * @param {?} rgba\n     * @return {?}\n     */\n        function (rgba) {\n            var /** @type {?} */ h, /** @type {?} */ s;\n            var /** @type {?} */ r = Math.min(rgba.r, 1), /** @type {?} */ g = Math.min(rgba.g, 1);\n            var /** @type {?} */ b = Math.min(rgba.b, 1), /** @type {?} */ a = Math.min(rgba.a, 1);\n            var /** @type {?} */ max = Math.max(r, g, b), /** @type {?} */ min = Math.min(r, g, b);\n            var /** @type {?} */ v = max, /** @type {?} */ d = max - min;\n            s = (max === 0) ? 0 : d / max;\n            if (max === min) {\n                h = 0;\n            }\n            else {\n                switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n                h /= 6;\n            }\n            return new Hsva(h, s, v, a);\n        };\n    /**\n     * @param {?} rgba\n     * @param {?=} allowHex8\n     * @return {?}\n     */\n    ColorPickerService.prototype.rgbaToHex = /**\n     * @param {?} rgba\n     * @param {?=} allowHex8\n     * @return {?}\n     */\n        function (rgba, allowHex8) {\n            /* tslint:disable:no-bitwise */\n            var /** @type {?} */ hex = '#' + ((1 << 24) | (rgba.r << 16) | (rgba.g << 8) | rgba.b).toString(16).substr(1);\n            if (allowHex8) {\n                hex += ((1 << 8) | Math.round(rgba.a * 255)).toString(16).substr(1);\n            }\n            /* tslint:enable:no-bitwise */\n            return hex;\n        };\n    /**\n     * @param {?} rgba\n     * @return {?}\n     */\n    ColorPickerService.prototype.denormalizeRGBA = /**\n     * @param {?} rgba\n     * @return {?}\n     */\n        function (rgba) {\n            return new Rgba(Math.round(rgba.r * 255), Math.round(rgba.g * 255), Math.round(rgba.b * 255), rgba.a);\n        };\n    /**\n     * @param {?=} colorString\n     * @param {?=} allowHex8\n     * @return {?}\n     */\n    ColorPickerService.prototype.stringToHsva = /**\n     * @param {?=} colorString\n     * @param {?=} allowHex8\n     * @return {?}\n     */\n        function (colorString, allowHex8) {\n            if (colorString === void 0) {\n                colorString = '';\n            }\n            if (allowHex8 === void 0) {\n                allowHex8 = false;\n            }\n            var /** @type {?} */ hsva = null;\n            colorString = (colorString || '').toLowerCase();\n            var /** @type {?} */ stringParsers = [\n                {\n                    re: /(rgb)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*%?,\\s*(\\d{1,3})\\s*%?(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n                    parse: function (execResult) {\n                        return new Rgba(parseInt(execResult[2], 10) / 255, parseInt(execResult[3], 10) / 255, parseInt(execResult[4], 10) / 255, isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\n                    }\n                }, {\n                    re: /(hsl)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n                    parse: function (execResult) {\n                        return new Hsla(parseInt(execResult[2], 10) / 360, parseInt(execResult[3], 10) / 100, parseInt(execResult[4], 10) / 100, isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\n                    }\n                }\n            ];\n            if (allowHex8) {\n                stringParsers.push({\n                    re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})?$/,\n                    parse: function (execResult) {\n                        return new Rgba(parseInt(execResult[1], 16) / 255, parseInt(execResult[2], 16) / 255, parseInt(execResult[3], 16) / 255, parseInt(execResult[4] || 'FF', 16) / 255);\n                    }\n                });\n            }\n            else {\n                stringParsers.push({\n                    re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/,\n                    parse: function (execResult) {\n                        return new Rgba(parseInt(execResult[1], 16) / 255, parseInt(execResult[2], 16) / 255, parseInt(execResult[3], 16) / 255, 1);\n                    }\n                }, {\n                    re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/,\n                    parse: function (execResult) {\n                        return new Rgba(parseInt(execResult[1] + execResult[1], 16) / 255, parseInt(execResult[2] + execResult[2], 16) / 255, parseInt(execResult[3] + execResult[3], 16) / 255, 1);\n                    }\n                });\n            }\n            for (var /** @type {?} */ key in stringParsers) {\n                if (stringParsers.hasOwnProperty(key)) {\n                    var /** @type {?} */ parser = stringParsers[key];\n                    var /** @type {?} */ match = parser.re.exec(colorString), /** @type {?} */ color = match && parser.parse(match);\n                    if (color) {\n                        if (color instanceof Rgba) {\n                            hsva = this.rgbaToHsva(color);\n                        }\n                        else if (color instanceof Hsla) {\n                            hsva = this.hsla2hsva(color);\n                        }\n                        return hsva;\n                    }\n                }\n            }\n            return hsva;\n        };\n    /**\n     * @param {?} hsva\n     * @param {?} outputFormat\n     * @param {?} alphaChannel\n     * @return {?}\n     */\n    ColorPickerService.prototype.outputFormat = /**\n     * @param {?} hsva\n     * @param {?} outputFormat\n     * @param {?} alphaChannel\n     * @return {?}\n     */\n        function (hsva, outputFormat, alphaChannel) {\n            switch (outputFormat) {\n                case 'hsla':\n                    var /** @type {?} */ hsla = this.hsva2hsla(hsva);\n                    var /** @type {?} */ hslaText = new Hsla(Math.round((hsla.h) * 360), Math.round(hsla.s * 100), Math.round(hsla.l * 100), Math.round(hsla.a * 100) / 100);\n                    if (hsva.a < 1 || alphaChannel === 'always') {\n                        return 'hsla(' + hslaText.h + ',' + hslaText.s + '%,' + hslaText.l + '%,' +\n                            hslaText.a + ')';\n                    }\n                    else {\n                        return 'hsl(' + hslaText.h + ',' + hslaText.s + '%,' + hslaText.l + '%)';\n                    }\n                case 'rgba':\n                    var /** @type {?} */ rgba = this.denormalizeRGBA(this.hsvaToRgba(hsva));\n                    if (hsva.a < 1 || alphaChannel === 'always') {\n                        return 'rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' +\n                            Math.round(rgba.a * 100) / 100 + ')';\n                    }\n                    else {\n                        return 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')';\n                    }\n                default:\n                    var /** @type {?} */ allowHex8 = (alphaChannel === 'always' || alphaChannel === 'hex8');\n                    return this.rgbaToHex(this.denormalizeRGBA(this.hsvaToRgba(hsva)), allowHex8);\n            }\n        };\n    return ColorPickerService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ColorPickerComponent = /*@__PURE__*/ (function () {\n    function ColorPickerComponent(elRef, cdRef, service) {\n        this.elRef = elRef;\n        this.cdRef = cdRef;\n        this.service = service;\n        this.isIE10 = false;\n        this.dialogArrowSize = 10;\n        this.dialogArrowOffset = 15;\n        this.useRootViewContainer = false;\n    }\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.slider = new SliderPosition(0, 0, 0, 0);\n            var /** @type {?} */ hueWidth = this.hueSlider.nativeElement.offsetWidth;\n            var /** @type {?} */ alphaWidth = this.alphaSlider.nativeElement.offsetWidth;\n            this.sliderDimMax = new SliderDimension(hueWidth, this.cpWidth, 130, alphaWidth);\n            if (this.cpOutputFormat === 'rgba') {\n                this.format = 1;\n            }\n            else if (this.cpOutputFormat === 'hsla') {\n                this.format = 2;\n            }\n            else {\n                this.format = 0;\n            }\n            this.listenerMouseDown = function (event) { _this.onMouseDown(event); };\n            this.listenerResize = function () { _this.onResize(); };\n            this.openDialog(this.initialColor, false);\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.closeDialog();\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.cpWidth !== 230) {\n                var /** @type {?} */ hueWidth = this.hueSlider.nativeElement.offsetWidth;\n                var /** @type {?} */ alphaWidth = this.alphaSlider.nativeElement.offsetWidth;\n                this.sliderDimMax = new SliderDimension(hueWidth, this.cpWidth, 130, alphaWidth);\n                this.updateColorPicker(false);\n                this.cdRef.detectChanges();\n            }\n        };\n    /**\n     * @param {?} color\n     * @param {?=} emit\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.openDialog = /**\n     * @param {?} color\n     * @param {?=} emit\n     * @return {?}\n     */\n        function (color, emit) {\n            if (emit === void 0) {\n                emit = true;\n            }\n            this.service.setActive(this);\n            if (!this.width) {\n                this.cpWidth = this.directiveElementRef.nativeElement.offsetWidth;\n            }\n            if (!this.height) {\n                this.height = 320;\n            }\n            this.setInitialColor(color);\n            this.setColorFromString(color, emit);\n            this.openColorPicker();\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.closeDialog = /**\n     * @return {?}\n     */\n        function () {\n            this.closeColorPicker();\n        };\n    /**\n     * @param {?} instance\n     * @param {?} elementRef\n     * @param {?} color\n     * @param {?} cpWidth\n     * @param {?} cpHeight\n     * @param {?} cpDialogDisplay\n     * @param {?} cpFallbackColor\n     * @param {?} cpAlphaChannel\n     * @param {?} cpOutputFormat\n     * @param {?} cpDisableInput\n     * @param {?} cpIgnoredElements\n     * @param {?} cpSaveClickOutside\n     * @param {?} cpUseRootViewContainer\n     * @param {?} cpPosition\n     * @param {?} cpPositionOffset\n     * @param {?} cpPositionRelativeToArrow\n     * @param {?} cpPresetLabel\n     * @param {?} cpPresetColors\n     * @param {?} cpMaxPresetColorsLength\n     * @param {?} cpPresetEmptyMessage\n     * @param {?} cpPresetEmptyMessageClass\n     * @param {?} cpOKButton\n     * @param {?} cpOKButtonClass\n     * @param {?} cpOKButtonText\n     * @param {?} cpCancelButton\n     * @param {?} cpCancelButtonClass\n     * @param {?} cpCancelButtonText\n     * @param {?} cpAddColorButton\n     * @param {?} cpAddColorButtonClass\n     * @param {?} cpAddColorButtonText\n     * @param {?} cpRemoveColorButtonClass\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.setupDialog = /**\n     * @param {?} instance\n     * @param {?} elementRef\n     * @param {?} color\n     * @param {?} cpWidth\n     * @param {?} cpHeight\n     * @param {?} cpDialogDisplay\n     * @param {?} cpFallbackColor\n     * @param {?} cpAlphaChannel\n     * @param {?} cpOutputFormat\n     * @param {?} cpDisableInput\n     * @param {?} cpIgnoredElements\n     * @param {?} cpSaveClickOutside\n     * @param {?} cpUseRootViewContainer\n     * @param {?} cpPosition\n     * @param {?} cpPositionOffset\n     * @param {?} cpPositionRelativeToArrow\n     * @param {?} cpPresetLabel\n     * @param {?} cpPresetColors\n     * @param {?} cpMaxPresetColorsLength\n     * @param {?} cpPresetEmptyMessage\n     * @param {?} cpPresetEmptyMessageClass\n     * @param {?} cpOKButton\n     * @param {?} cpOKButtonClass\n     * @param {?} cpOKButtonText\n     * @param {?} cpCancelButton\n     * @param {?} cpCancelButtonClass\n     * @param {?} cpCancelButtonText\n     * @param {?} cpAddColorButton\n     * @param {?} cpAddColorButtonClass\n     * @param {?} cpAddColorButtonText\n     * @param {?} cpRemoveColorButtonClass\n     * @return {?}\n     */\n        function (instance, elementRef, color, cpWidth, cpHeight, cpDialogDisplay, cpFallbackColor, cpAlphaChannel, cpOutputFormat, cpDisableInput, cpIgnoredElements, cpSaveClickOutside, cpUseRootViewContainer, cpPosition, cpPositionOffset, cpPositionRelativeToArrow, cpPresetLabel, cpPresetColors, cpMaxPresetColorsLength, cpPresetEmptyMessage, cpPresetEmptyMessageClass, cpOKButton, cpOKButtonClass, cpOKButtonText, cpCancelButton, cpCancelButtonClass, cpCancelButtonText, cpAddColorButton, cpAddColorButtonClass, cpAddColorButtonText, cpRemoveColorButtonClass) {\n            this.setInitialColor(color);\n            this.isIE10 = (detectIE() === 10);\n            this.directiveInstance = instance;\n            this.directiveElementRef = elementRef;\n            this.cpDisableInput = cpDisableInput;\n            this.cpAlphaChannel = cpAlphaChannel;\n            this.cpOutputFormat = cpOutputFormat;\n            this.cpDialogDisplay = cpDialogDisplay;\n            this.cpIgnoredElements = cpIgnoredElements;\n            this.cpSaveClickOutside = cpSaveClickOutside;\n            this.useRootViewContainer = cpUseRootViewContainer;\n            this.width = this.cpWidth = parseInt(cpWidth, 10);\n            this.height = this.cpHeight = parseInt(cpHeight, 10);\n            this.cpPosition = cpPosition;\n            this.cpPositionOffset = parseInt(cpPositionOffset, 10);\n            this.cpOKButton = cpOKButton;\n            this.cpOKButtonText = cpOKButtonText;\n            this.cpOKButtonClass = cpOKButtonClass;\n            this.cpCancelButton = cpCancelButton;\n            this.cpCancelButtonText = cpCancelButtonText;\n            this.cpCancelButtonClass = cpCancelButtonClass;\n            this.fallbackColor = cpFallbackColor || '#fff';\n            this.setPresetConfig(cpPresetLabel, cpPresetColors);\n            this.cpMaxPresetColorsLength = cpMaxPresetColorsLength;\n            this.cpPresetEmptyMessage = cpPresetEmptyMessage;\n            this.cpPresetEmptyMessageClass = cpPresetEmptyMessageClass;\n            this.cpAddColorButton = cpAddColorButton;\n            this.cpAddColorButtonText = cpAddColorButtonText;\n            this.cpAddColorButtonClass = cpAddColorButtonClass;\n            this.cpRemoveColorButtonClass = cpRemoveColorButtonClass;\n            if (!cpPositionRelativeToArrow) {\n                this.dialogArrowOffset = 0;\n            }\n            if (this.cpDialogDisplay === 'inline') {\n                this.dialogArrowSize = 0;\n                this.dialogArrowOffset = 0;\n            }\n            if (cpOutputFormat === 'hex' && cpAlphaChannel !== 'always' && cpAlphaChannel !== 'hex8') {\n                this.cpAlphaChannel = 'disabled';\n            }\n        };\n    /**\n     * @param {?} color\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.setInitialColor = /**\n     * @param {?} color\n     * @return {?}\n     */\n        function (color) {\n            this.initialColor = color;\n        };\n    /**\n     * @param {?} cpPresetLabel\n     * @param {?} cpPresetColors\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.setPresetConfig = /**\n     * @param {?} cpPresetLabel\n     * @param {?} cpPresetColors\n     * @return {?}\n     */\n        function (cpPresetLabel, cpPresetColors) {\n            this.cpPresetLabel = cpPresetLabel;\n            this.cpPresetColors = cpPresetColors;\n        };\n    /**\n     * @param {?} value\n     * @param {?=} emit\n     * @param {?=} update\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.setColorFromString = /**\n     * @param {?} value\n     * @param {?=} emit\n     * @param {?=} update\n     * @return {?}\n     */\n        function (value, emit, update) {\n            if (emit === void 0) {\n                emit = true;\n            }\n            if (update === void 0) {\n                update = true;\n            }\n            var /** @type {?} */ hsva;\n            if (this.cpAlphaChannel === 'always' || this.cpAlphaChannel === 'hex8') {\n                hsva = this.service.stringToHsva(value, true);\n                if (!hsva && !this.hsva) {\n                    hsva = this.service.stringToHsva(value, false);\n                }\n            }\n            else {\n                hsva = this.service.stringToHsva(value, false);\n            }\n            if (!hsva && !this.hsva) {\n                hsva = this.service.stringToHsva(this.fallbackColor, false);\n            }\n            if (hsva) {\n                this.hsva = hsva;\n                this.sliderH = this.hsva.h;\n                this.updateColorPicker(emit, update);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onResize = /**\n     * @return {?}\n     */\n        function () {\n            if (this.position === 'fixed') {\n                this.setDialogPosition();\n            }\n            else if (this.cpDialogDisplay !== 'inline') {\n                this.closeColorPicker();\n            }\n        };\n    /**\n     * @param {?} slider\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onDragEnd = /**\n     * @param {?} slider\n     * @return {?}\n     */\n        function (slider) {\n            this.directiveInstance.sliderDragEnd({ slider: slider, color: this.outputColor });\n        };\n    /**\n     * @param {?} slider\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onDragStart = /**\n     * @param {?} slider\n     * @return {?}\n     */\n        function (slider) {\n            this.directiveInstance.sliderDragStart({ slider: slider, color: this.outputColor });\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onMouseDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (!this.isIE10 && this.cpDialogDisplay === 'popup' &&\n                event.target !== this.directiveElementRef.nativeElement &&\n                !this.isDescendant(this.elRef.nativeElement, event.target) &&\n                this.cpIgnoredElements.filter(function (item) { return item === event.target; }).length === 0) {\n                if (!this.cpSaveClickOutside) {\n                    this.setColorFromString(this.initialColor, false);\n                    this.directiveInstance.colorChanged(this.initialColor);\n                }\n                this.closeColorPicker();\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onAcceptColor = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.stopPropagation();\n            if (this.cpDialogDisplay === 'popup') {\n                this.closeColorPicker();\n            }\n            if (this.outputColor) {\n                this.directiveInstance.colorSelected(this.outputColor);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onCancelColor = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.stopPropagation();\n            this.setColorFromString(this.initialColor, true);\n            if (this.cpDialogDisplay === 'popup') {\n                this.directiveInstance.colorChanged(this.initialColor, true);\n                this.closeColorPicker();\n            }\n            this.directiveInstance.colorCanceled();\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onFormatToggle = /**\n     * @return {?}\n     */\n        function () {\n            this.format = (this.format + 1) % 3;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onColorChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.hsva.s = value.s / value.rgX;\n            this.hsva.v = value.v / value.rgY;\n            this.updateColorPicker();\n            this.directiveInstance.sliderChanged({\n                slider: 'lightness',\n                value: this.hsva.v,\n                color: this.outputColor\n            });\n            this.directiveInstance.sliderChanged({\n                slider: 'saturation',\n                value: this.hsva.s,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onHueChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.hsva.h = value.v / value.rgX;\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.sliderChanged({\n                slider: 'hue',\n                value: this.hsva.h,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onAlphaChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.hsva.a = value.v / value.rgX;\n            this.updateColorPicker();\n            this.directiveInstance.sliderChanged({\n                slider: 'alpha',\n                value: this.hsva.a,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onHexInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (value === null) {\n                this.updateColorPicker();\n            }\n            else {\n                if (value && value[0] !== '#') {\n                    value = '#' + value;\n                }\n                this.setColorFromString(value, true, false);\n                this.directiveInstance.inputChanged({\n                    input: 'hex',\n                    value: value,\n                    color: this.outputColor\n                });\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onRedInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ rgba = this.service.hsvaToRgba(this.hsva);\n            rgba.r = value.v / value.rg;\n            this.hsva = this.service.rgbaToHsva(rgba);\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({ input: 'red', value: rgba.r, color: this.outputColor });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onBlueInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ rgba = this.service.hsvaToRgba(this.hsva);\n            rgba.b = value.v / value.rg;\n            this.hsva = this.service.rgbaToHsva(rgba);\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({ input: 'blue', value: rgba.b, color: this.outputColor });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onGreenInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ rgba = this.service.hsvaToRgba(this.hsva);\n            rgba.g = value.v / value.rg;\n            this.hsva = this.service.rgbaToHsva(rgba);\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({\n                input: 'green',\n                value: rgba.g,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onAlphaInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.hsva.a = value.v / value.rg;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({\n                input: 'alpha',\n                value: this.hsva.a,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onHueInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.hsva.h = value.v / value.rg;\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({\n                input: 'hue',\n                value: this.hsva.h,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onLightnessInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ hsla = this.service.hsva2hsla(this.hsva);\n            hsla.l = value.v / value.rg;\n            this.hsva = this.service.hsla2hsva(hsla);\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({\n                input: 'lightness',\n                value: hsla.l,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onSaturationInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ hsla = this.service.hsva2hsla(this.hsva);\n            hsla.s = value.v / value.rg;\n            this.hsva = this.service.hsla2hsva(hsla);\n            this.sliderH = this.hsva.h;\n            this.updateColorPicker();\n            this.directiveInstance.inputChanged({\n                input: 'saturation',\n                value: hsla.s,\n                color: this.outputColor\n            });\n        };\n    /**\n     * @param {?} event\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onAddPresetColor = /**\n     * @param {?} event\n     * @param {?} value\n     * @return {?}\n     */\n        function (event, value) {\n            event.stopPropagation();\n            if (!this.cpPresetColors.filter(function (color) { return (color === value); }).length) {\n                this.cpPresetColors = this.cpPresetColors.concat(value);\n                this.directiveInstance.presetColorsChanged(this.cpPresetColors);\n            }\n        };\n    /**\n     * @param {?} event\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.onRemovePresetColor = /**\n     * @param {?} event\n     * @param {?} value\n     * @return {?}\n     */\n        function (event, value) {\n            event.stopPropagation();\n            this.cpPresetColors = this.cpPresetColors.filter(function (color) { return (color !== value); });\n            this.directiveInstance.presetColorsChanged(this.cpPresetColors);\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.openColorPicker = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.show) {\n                this.show = true;\n                this.hidden = true;\n                setTimeout(function () {\n                    _this.hidden = false;\n                    _this.setDialogPosition();\n                    _this.cdRef.detectChanges();\n                }, 0);\n                this.directiveInstance.toggle(true);\n                if (!this.isIE10) {\n                    document.addEventListener('mousedown', this.listenerMouseDown);\n                }\n                window.addEventListener('resize', this.listenerResize);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.closeColorPicker = /**\n     * @return {?}\n     */\n        function () {\n            if (this.show) {\n                this.show = false;\n                this.directiveInstance.toggle(false);\n                if (!this.isIE10) {\n                    document.removeEventListener('mousedown', this.listenerMouseDown);\n                }\n                window.removeEventListener('resize', this.listenerResize);\n                if (!this.cdRef['destroyed']) {\n                    this.cdRef.detectChanges();\n                }\n            }\n        };\n    /**\n     * @param {?=} emit\n     * @param {?=} update\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.updateColorPicker = /**\n     * @param {?=} emit\n     * @param {?=} update\n     * @return {?}\n     */\n        function (emit, update) {\n            if (emit === void 0) {\n                emit = true;\n            }\n            if (update === void 0) {\n                update = true;\n            }\n            if (this.sliderDimMax) {\n                var /** @type {?} */ lastOutput = this.outputColor;\n                var /** @type {?} */ hsla = this.service.hsva2hsla(this.hsva);\n                var /** @type {?} */ rgba = this.service.denormalizeRGBA(this.service.hsvaToRgba(this.hsva));\n                var /** @type {?} */ hue = this.service.denormalizeRGBA(this.service.hsvaToRgba(new Hsva(this.sliderH || this.hsva.h, 1, 1, 1)));\n                if (update) {\n                    this.hslaText = new Hsla(Math.round((hsla.h) * 360), Math.round(hsla.s * 100), Math.round(hsla.l * 100), Math.round(hsla.a * 100) / 100);\n                    this.rgbaText = new Rgba(rgba.r, rgba.g, rgba.b, Math.round(rgba.a * 100) / 100);\n                    var /** @type {?} */ allowHex8 = this.cpAlphaChannel === 'always' || this.cpAlphaChannel === 'hex8';\n                    this.hexText = this.service.rgbaToHex(rgba, allowHex8);\n                }\n                this.hueSliderColor = 'rgb(' + hue.r + ',' + hue.g + ',' + hue.b + ')';\n                this.alphaSliderColor = 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')';\n                this.outputColor = this.service.outputFormat(this.hsva, this.cpOutputFormat, this.cpAlphaChannel);\n                this.selectedColor = this.service.outputFormat(this.hsva, 'rgba', null);\n                this.slider = new SliderPosition((this.sliderH || this.hsva.h) * this.sliderDimMax.h - 8, this.hsva.s * this.sliderDimMax.s - 8, (1 - this.hsva.v) * this.sliderDimMax.v - 8, this.hsva.a * this.sliderDimMax.a - 8);\n                if (emit && lastOutput !== this.outputColor) {\n                    this.directiveInstance.colorChanged(this.outputColor);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.setDialogPosition = /**\n     * @return {?}\n     */\n        function () {\n            if (this.cpDialogDisplay === 'inline') {\n                this.position = 'relative';\n            }\n            else {\n                var /** @type {?} */ dialogHeight = this.dialogElement.nativeElement.offsetHeight;\n                var /** @type {?} */ position = 'static', /** @type {?} */ transform = '', /** @type {?} */ style = null;\n                var /** @type {?} */ parentNode = null, /** @type {?} */ transformNode = null;\n                var /** @type {?} */ node = this.directiveElementRef.nativeElement.parentNode;\n                while (node !== null && node.tagName !== 'HTML') {\n                    style = window.getComputedStyle(node);\n                    position = style.getPropertyValue('position');\n                    transform = style.getPropertyValue('transform');\n                    if (position !== 'static' && parentNode === null) {\n                        parentNode = node;\n                    }\n                    if (transform && transform !== 'none' && transformNode === null) {\n                        transformNode = node;\n                    }\n                    if (position === 'fixed') {\n                        parentNode = transformNode;\n                        break;\n                    }\n                    node = node.parentNode;\n                }\n                var /** @type {?} */ boxDirective = this.createBox(this.directiveElementRef.nativeElement, (position !== 'fixed'));\n                if (this.useRootViewContainer || (position === 'fixed' && !parentNode)) {\n                    this.top = boxDirective.top;\n                    this.left = boxDirective.left;\n                }\n                else {\n                    if (parentNode === null) {\n                        parentNode = node;\n                    }\n                    var /** @type {?} */ boxParent = this.createBox(parentNode, (position !== 'fixed'));\n                    this.top = boxDirective.top - boxParent.top;\n                    this.left = boxDirective.left - boxParent.left;\n                }\n                if (position === 'fixed') {\n                    this.position = 'fixed';\n                }\n                if (this.cpPosition === 'left') {\n                    this.top += boxDirective.height * this.cpPositionOffset / 100 - this.dialogArrowOffset;\n                    this.left -= this.cpWidth + this.dialogArrowSize - 2;\n                }\n                else if (this.cpPosition === 'top') {\n                    this.arrowTop = dialogHeight - 1;\n                    this.top -= dialogHeight + this.dialogArrowSize;\n                    this.left += this.cpPositionOffset / 100 * boxDirective.width - this.dialogArrowOffset;\n                }\n                else if (this.cpPosition === 'bottom') {\n                    this.top += boxDirective.height + this.dialogArrowSize;\n                    this.left += this.cpPositionOffset / 100 * boxDirective.width - this.dialogArrowOffset;\n                }\n                else {\n                    this.top += boxDirective.height * this.cpPositionOffset / 100 - this.dialogArrowOffset;\n                    this.left += boxDirective.width + this.dialogArrowSize - 2;\n                }\n            }\n        };\n    /**\n     * @param {?} element\n     * @param {?} offset\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.createBox = /**\n     * @param {?} element\n     * @param {?} offset\n     * @return {?}\n     */\n        function (element, offset) {\n            return {\n                top: element.getBoundingClientRect().top + (offset ? window.pageYOffset : 0),\n                left: element.getBoundingClientRect().left + (offset ? window.pageXOffset : 0),\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            };\n        };\n    /**\n     * @param {?} parent\n     * @param {?} child\n     * @return {?}\n     */\n    ColorPickerComponent.prototype.isDescendant = /**\n     * @param {?} parent\n     * @param {?} child\n     * @return {?}\n     */\n        function (parent, child) {\n            var /** @type {?} */ node = child.parentNode;\n            while (node !== null) {\n                if (node === parent) {\n                    return true;\n                }\n                node = node.parentNode;\n            }\n            return false;\n        };\n    return ColorPickerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ColorPickerDirective = /*@__PURE__*/ (function () {\n    function ColorPickerDirective(injector, cfr, appRef, vcRef, elRef, _service) {\n        this.injector = injector;\n        this.cfr = cfr;\n        this.appRef = appRef;\n        this.vcRef = vcRef;\n        this.elRef = elRef;\n        this._service = _service;\n        this.dialogCreated = false;\n        this.ignoreChanges = false;\n        this.cpWidth = '230px';\n        this.cpHeight = 'auto';\n        this.cpToggle = false;\n        this.cpIgnoredElements = [];\n        this.cpDisableInput = false;\n        this.cpAlphaChannel = 'enabled';\n        this.cpOutputFormat = 'hex';\n        this.cpFallbackColor = '#fff';\n        this.cpDialogDisplay = 'popup';\n        this.cpSaveClickOutside = true;\n        this.cpUseRootViewContainer = false;\n        this.cpPosition = 'right';\n        this.cpPositionOffset = '0%';\n        this.cpPositionRelativeToArrow = false;\n        this.cpOKButton = false;\n        this.cpOKButtonText = 'OK';\n        this.cpOKButtonClass = 'cp-ok-button-class';\n        this.cpCancelButton = false;\n        this.cpCancelButtonText = 'Cancel';\n        this.cpCancelButtonClass = 'cp-cancel-button-class';\n        this.cpPresetLabel = 'Preset colors';\n        this.cpMaxPresetColorsLength = 6;\n        this.cpPresetEmptyMessage = 'No colors added';\n        this.cpPresetEmptyMessageClass = 'preset-empty-message';\n        this.cpAddColorButton = false;\n        this.cpAddColorButtonText = 'Add color';\n        this.cpAddColorButtonClass = 'cp-add-color-button-class';\n        this.cpRemoveColorButtonClass = 'cp-remove-color-button-class';\n        this.cpInputChange = new EventEmitter(true);\n        this.cpToggleChange = new EventEmitter(true);\n        this.cpSliderChange = new EventEmitter(true);\n        this.cpSliderDragEnd = new EventEmitter(true);\n        this.cpSliderDragStart = new EventEmitter(true);\n        this.colorPickerOpen = new EventEmitter(true);\n        this.colorPickerClose = new EventEmitter(true);\n        this.colorPickerCancel = new EventEmitter(true);\n        this.colorPickerSelect = new EventEmitter(true);\n        this.colorPickerChange = new EventEmitter(false);\n        this.cpPresetColorsChange = new EventEmitter(true);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.handleClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.inputFocus();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.handleFocus = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.inputFocus();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.handleInput = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.inputChange(event.target.value);\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.cmpRef !== undefined) {\n                this.cmpRef.destroy();\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes.cpToggle) {\n                if (!this.disabled && changes.cpToggle.currentValue) {\n                    this.openDialog();\n                }\n                else if (this.dialog && !changes.cpToggle.currentValue) {\n                    this.dialog.closeDialog();\n                }\n            }\n            if (changes.colorPicker) {\n                if (this.dialog && !this.ignoreChanges) {\n                    if (this.cpDialogDisplay === 'inline') {\n                        this.dialog.setInitialColor(changes.colorPicker.currentValue);\n                    }\n                    this.dialog.setColorFromString(changes.colorPicker.currentValue, false);\n                }\n                this.ignoreChanges = false;\n            }\n            if (changes.cpPresetLabel || changes.cpPresetColors) {\n                if (this.dialog) {\n                    this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.openDialog = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.dialogCreated) {\n                var /** @type {?} */ vcRef = this.vcRef;\n                this.dialogCreated = true;\n                if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {\n                    var /** @type {?} */ classOfRootComponent = this.appRef.componentTypes[0];\n                    var /** @type {?} */ appInstance = this.injector.get(classOfRootComponent);\n                    vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef;\n                    if (vcRef === this.vcRef) {\n                        console.warn('You are using cpUseRootViewContainer, ' +\n                            'but the root component is not exposing viewContainerRef!' +\n                            'Please expose it by adding \\'public vcRef: ViewContainerRef\\' to the constructor.');\n                    }\n                }\n                var /** @type {?} */ compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent);\n                var /** @type {?} */ injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);\n                this.cmpRef = vcRef.createComponent(compFactory, 0, injector, []);\n                this.cmpRef.instance.setupDialog(this, this.elRef, this.colorPicker, this.cpWidth, this.cpHeight, this.cpDialogDisplay, this.cpFallbackColor, this.cpAlphaChannel, this.cpOutputFormat, this.cpDisableInput, this.cpIgnoredElements, this.cpSaveClickOutside, this.cpUseRootViewContainer, this.cpPosition, this.cpPositionOffset, this.cpPositionRelativeToArrow, this.cpPresetLabel, this.cpPresetColors, this.cpMaxPresetColorsLength, this.cpPresetEmptyMessage, this.cpPresetEmptyMessageClass, this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText, this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText, this.cpAddColorButton, this.cpAddColorButtonClass, this.cpAddColorButtonText, this.cpRemoveColorButtonClass);\n                this.dialog = this.cmpRef.instance;\n                if (this.vcRef !== vcRef) {\n                    this.cmpRef.changeDetectorRef.detectChanges();\n                }\n            }\n            else if (this.dialog) {\n                this.dialog.openDialog(this.colorPicker);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.toggle = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.cpToggleChange.emit(value);\n            if (value) {\n                this.colorPickerOpen.emit(this.colorPicker);\n            }\n            else {\n                this.colorPickerClose.emit(this.colorPicker);\n            }\n        };\n    /**\n     * @param {?} value\n     * @param {?=} ignore\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.colorChanged = /**\n     * @param {?} value\n     * @param {?=} ignore\n     * @return {?}\n     */\n        function (value, ignore) {\n            if (ignore === void 0) {\n                ignore = true;\n            }\n            this.ignoreChanges = ignore;\n            this.colorPickerChange.emit(value);\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.colorCanceled = /**\n     * @return {?}\n     */\n        function () {\n            this.colorPickerCancel.emit();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.colorSelected = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.colorPickerSelect.emit(value);\n        };\n    /**\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.inputFocus = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ element = this.elRef.nativeElement;\n            var /** @type {?} */ ignored = this.cpIgnoredElements.filter(function (item) { return item === element; });\n            if (!this.disabled && !ignored.length) {\n                this.openDialog();\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.inputChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.dialog) {\n                this.dialog.setColorFromString(value, true);\n            }\n            else {\n                this.colorPicker = value;\n                this.colorPickerChange.emit(this.colorPicker);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.inputChanged = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.cpInputChange.emit(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.sliderChanged = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.cpSliderChange.emit(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.sliderDragEnd = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.cpSliderDragEnd.emit(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.sliderDragStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.cpSliderDragStart.emit(event);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ColorPickerDirective.prototype.presetColorsChanged = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.cpPresetColorsChange.emit(value);\n        };\n    return ColorPickerDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ColorPickerModule = /*@__PURE__*/ (function () {\n    function ColorPickerModule() {\n    }\n    return ColorPickerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { Cmyk, Hsla, Hsva, Rgba, TextDirective, SliderDirective, ColorPickerComponent, ColorPickerDirective, ColorPickerModule, ColorPickerService };\n//# sourceMappingURL=ngx-color-picker.es5.js.map\n",null]}