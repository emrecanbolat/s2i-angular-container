import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
export declare class HeadroomComponent implements OnInit, AfterContentInit, OnDestroy {
    wrapperClassName: string;
    innerClassName: string;
    innerStyle: any;
    /**
     * pass styles for the wrapper div
     * (this maintains the components vertical space at the top of the page)
     */
    wrapperStyle: any;
    /** disable pinning and unpinning */
    disable: boolean;
    /** scroll tolerance in px when scrolling up before component is pinned */
    upTolerance: number;
    /** scroll tolerance in px when scrolling down before component is pinned */
    downTolerance: number;
    /**
     * height in px where the header should start and stop pinning.
     * Useful when you have another element above Headroom
     */
    pinStart: number;
    calcHeightOnResize: boolean;
    /** Duration of animation in ms */
    duration: number;
    /** Easing of animation */
    easing: string;
    pin: EventEmitter<{}>;
    unpin: EventEmitter<{}>;
    unfix: EventEmitter<{}>;
    inner: ElementRef;
    wrapperHeight: number;
    currentScrollY: number;
    lastKnownScrollY: number;
    scrolled: boolean;
    resizeTicking: boolean;
    state: string;
    translateY: string;
    height: number;
    scrollTicking: boolean;
    /**
     * provide a custom 'parent' element for scroll events.
     * `parent` should be a function which resolves to the desired element.
     */
    parent: () => any;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    setHeightOffset(): void;
    getScrollY(): any;
    getViewportHeight(): any;
    getDocumentHeight(): number;
    getElementPhysicalHeight(elm: any): number;
    getElementHeight(elm: any): number;
    getScrollerPhysicalHeight(): any;
    getScrollerHeight(): number;
    isOutOfBound(currentScrollY: any): boolean;
    handleScroll(): void;
    handleResize(): void;
    handleUnpin(): void;
    handlePin(): void;
    handleUnfix(): void;
    update(): void;
}
